apply plugin: 'com.android.library'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        consumerProguardFiles 'proguard-rules.txt'
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
}

// make sure that flac is set up before ndk compiling starts
afterEvaluate {
    android.libraryVariants.all { variant ->
        variant.ndkCompile?.dependsOn(downloadFlac)
    }
}

dependencies {
    compile libraries.exoPlayerCore
}

task downloadFlac << {
    // if the flac sources already exist, skip
    def flacDir = file("src/main/jni/flac")
    if (flacDir.exists())
        return

    def flacVersion = "1.3.1"

    // download flac if necessary
    def dstFile = file("src/main/jni/flac-${flacVersion}.tar.xz")
    if (!dstFile.exists()) {
        def tmpFile = file("src/main/jni/flac.temp")
        tmpFile.delete()
        exec {
            executable 'sh'
            args '-c', "curl http://downloads.xiph.org/releases/flac/flac-${flacVersion}.tar.xz > ${tmpFile.absolutePath}"
        }
        tmpFile.renameTo(dstFile)
    }

    // extract flac and rename it
    exec {
        executable 'sh'
        args '-c', "tar -xzf ${dstFile.absolutePath} -C ${dstFile.parentFile.absolutePath}"
    }
    file("src/main/jni/flac-$flacVersion")
            .renameTo(flacDir)
}