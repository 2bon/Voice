import de.ph1b.audiobook.signing.SigningDetailsProvider

plugins {
  id "io.gitlab.arturbosch.detekt" version "1.0.0.RC2"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply from: "../artifacts.gradle"

detekt {
  profile("main") {
    input = "$projectDir/src/main/java"
    config = "$projectDir/detekt.yml"
    filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
  }
}

android {

  compileSdkVersion versions.compileSdk
  buildToolsVersion versions.buildTools

  defaultConfig {
    applicationId "de.ph1b.audiobook"
    minSdkVersion versions.minSdk
    targetSdkVersion versions.targetSdk
    versionCode 206
    versionName '3.4.2'

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    ndk {
      abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
    }
  }

  signingConfigs {
    release {
      def signingPropFile = new File('signing.properties')
      def signingDetailsProvider = new SigningDetailsProvider()
      def signingDetails = signingDetailsProvider.provide(signingPropFile)
      if (signingDetails != null) {
        storeFile = signingDetails.storeFile
        storePassword = signingDetails.storePassword
        keyAlias = signingDetails.keyAlias
        keyPassword = signingDetails.keyPassword
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro'
      signingConfig signingConfigs.release
      multiDexEnabled false
    }
    debug {
      minifyEnabled false
      shrinkResources false
      ext.enableCrashlytics = false
      multiDexEnabled true
    }
  }

  testOptions.unitTests.returnDefaultValues = true

  lintOptions.abortOnError = false

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  //noinspection GroovyMissingReturnStatement
  packagingOptions {
    exclude 'META-INF/rxjava.properties'
  }

  productFlavors {
    opensource {}
    proprietary {}
  }

  dataBinding.enabled = true
}

dependencies {
  compile project(":core")
  compile project(":common")
  compile project(":chapterreader")

  kapt libraries.dataBindingCompiler

  compile libraries.supportAppCompat
  compile libraries.supportRecyclerView
  compile libraries.supportDesign
  compile libraries.supportTransitions
  compile libraries.supportConstraintLayout

  compile libraries.picasso

  compile libraries.materialDialogs
  compile libraries.materialCab

  compile libraries.floatingActionButton

  proprietaryCompile(libraries.crashlytics) {
    transitive = true
  }

  compile libraries.dagger
  compile libraries.daggerAndroidSupport
  kapt libraries.daggerCompiler
  kapt libraries.daggerAndroidProcessor
  provided libraries.jsr250

  testCompile libraries.junit
  testCompile libraries.robolectric
  testCompile libraries.assertJ
  testCompile libraries.mockito

  androidTestCompile libraries.supportTestRunner
  androidTestCompile libraries.assertJ

  compile libraries.rxJava
  compile libraries.rxAndroid
  compile libraries.rxInterop
  compile libraries.rxPreferences

  compile libraries.kotlinStdLib

  compile libraries.slimber

  compile libraries.exoPlayerCore
  compile project(":exoplayer-flac")
  compile project(":exoplayer-opus")

  compile libraries.conductor
  compile libraries.conductorSupport
  compile libraries.conductorLifecycle

  compile libraries.moshi
}

// task that is an alias for f-droid
task fdroid(dependsOn: ':app:assembleOpensourceRelease')
task release(dependsOn: ':app:assembleProprietaryRelease')
